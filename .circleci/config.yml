version: 2.1

# orbs:
#   node: circleci/node@5.0.2
#   heroku: circleci/heroku@1.2.6

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: frontend/node_modules
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: backend/node_modules
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    # executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test
      - run: 
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: frontend/node_modules
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    # executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys: backend-test
      - run: 
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: backend/node_modules
          key: backend-test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: Scan front-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: frontend/node_modules
          key: frontend-scan 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: backend/node_modules
          key: backend-scan 


  deploy-infrastructure:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run: 
          name: See the current folder
          command: |
            pwd
            cd ~
            ls
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ./.circleci/ansible/inventory.txt
      - destroy-environment:
          id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:39:80:52:1a:ea:51:2e:80:b9:d8:40:c3:e9:65:c0"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            apk add openssh-client
            pip install awscli
      - attach_workspace:
          at: ~/
      # - run: 
      #     name: DEBUG
      #     command: |
      #       cd ~/project/.circleci/ansible
      #       cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      # - destroy-environment:
      #     id: '${CIRCLE_WORKFLOW_ID:0:7}'



  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["a5:39:80:52:1a:ea:51:2e:80:b9:d8:40:c3:e9:65:c0"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add curl
  #           apk add --upgrade bash
  #           apk add --update ansible
  #           apk add openssh-client
  #           pip3 install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
  
  # run-migrations:
  #   docker:
  #     - image: doctrine/nodejs-aws-cli:latest
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: | 
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
  #           then
  #             curl https://kvdb.io/Df3HQppKnzXR2UABK98gC2/inventory_file -d "1"
  #           fi
  #     - destroy-environment:
  #         id: '${CIRCLE_WORKFLOW_ID:0:7}'

  # deploy-frontend:
  #   docker:
  #     - image: doctrine/nodejs-aws-cli:latest
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           docker run --rm -it --entrypoint apk doctrine/nodejs-aws-cli:latest add --no-cache npm

  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(grep -Po '^[0-9.]+' ~/project/.circleci/ansible/inventory.txt)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      # - run-migrations:
      #     requires: 
      #       - configure-infrastructure



