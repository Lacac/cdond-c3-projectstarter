version: 2.1

# orbs:
#   node: circleci/node@5.0.2
#   heroku: circleci/heroku@1.2.6

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: '${CIRCLE_WORKFLOW_ID:0:7}'
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
# aws s3 rm "s3://udapeople-<<parameters.workflow_id>>" --recursive


  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string   
            default: '${CIRCLE_WORKFLOW_ID:0:7}'   
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/Df3HQppKnzXR2UABK98gC2/migration_<<parameters.workflow_id>>)
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: frontend/node_modules
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: backend/node_modules
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    # executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test
      - run: 
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: frontend/node_modules
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    # executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys: backend-test
      - run: 
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: backend/node_modules
          key: backend-test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: Scan front-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: frontend/node_modules
          key: frontend-scan 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: backend/node_modules
          key: backend-scan 


  deploy-infrastructure:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run: 
          name: See the current folder
          command: |
            pwd
            cd ~
            ls
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
      - destroy-environment
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:39:80:52:1a:ea:51:2e:80:b9:d8:40:c3:e9:65:c0"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            apk add openssh-client
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  
  run-migrations:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Run migrations
          command: | 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              curl https://kvdb.io/Df3HQppKnzXR2UABK98gC2/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - destroy-environment


  deploy-frontend:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(grep -Po '^[0-9.]+' ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo "---------------------------- ENV of frontend"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            echo "--------------${API_URL}"
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:39:80:52:1a:ea:51:2e:80:b9:d8:40:c3:e9:65:c0"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations


  smoke-test:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible npm curl
            apk add --no-cache grep
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export API_URL=$(grep -Po '(?<=API_URL=)[^,]+' ~/project/frontend/.env)
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok" 
            then 
              return 0
            else 
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-ap-southeast-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # - destroy-environment
      # - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Get old stack workflow id & remove old stacks, s3
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "-----------DELETED------------"
            else
              echo "----------NOT-----------------"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test:
          requires: 
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires: 
            - smoke-test
      - cleanup:
          requires: 
            - cloudfront-update

